// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is generated by generate_type_info_records.py, DO NOT MODIFY.

#include "syzygy/pdb/gen/pdb_type_info_records.h"

namespace pdb {

LeafArgList::LeafArgList() : body_{} {}

bool LeafArgList::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = offsetof(Microsoft_Cci_Pdb::LeafArgList, arg);
  if (!stream->ReadBytes(to_read, &body_))
    return false;

  return true;
}

LeafArray::LeafArray() : body_{},
                         size_{},
                         name_{} {}

bool LeafArray::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = offsetof(Microsoft_Cci_Pdb::LeafArray, data);
  if (!stream->ReadBytes(to_read, &body_))
    return false;
  if (!ReadUnsignedNumeric(stream, &size_))
    return false;
  if (!ReadWideString(stream, &name_))
    return false;

  return true;
}

LeafBClass::LeafBClass() : body_{},
                           offset_{} {}

bool LeafBClass::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = offsetof(Microsoft_Cci_Pdb::LeafBClass, offset);
  if (!stream->ReadBytes(to_read, &body_))
    return false;
  if (!ReadUnsignedNumeric(stream, &offset_))
    return false;

  return true;
}

LeafBitfield::LeafBitfield() : body_{} {}

bool LeafBitfield::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = sizeof(body_);
  if (!stream->ReadBytes(to_read, &body_))
    return false;

  return true;
}

LeafClass::LeafClass() : body_{},
                         size_{},
                         name_{},
                         decorated_name_{} {}

bool LeafClass::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = offsetof(Microsoft_Cci_Pdb::LeafClass, data);
  if (!stream->ReadBytes(to_read, &body_))
    return false;
  if (!ReadUnsignedNumeric(stream, &size_))
    return false;
  if (!ReadWideString(stream, &name_))
    return false;
  if ((property().decorated_name_present != 0) &&
      !ReadWideString(stream, &decorated_name_)) {
    return false;
  }

  return true;
}

LeafEnum::LeafEnum() : body_{},
                       name_{},
                       decorated_name_{} {}

bool LeafEnum::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = offsetof(Microsoft_Cci_Pdb::LeafEnum, name);
  if (!stream->ReadBytes(to_read, &body_))
    return false;
  if (!ReadWideString(stream, &name_))
    return false;
  if ((property().decorated_name_present != 0) &&
      !ReadWideString(stream, &decorated_name_)) {
    return false;
  }

  return true;
}

LeafEnumerate::LeafEnumerate() : body_{},
                                 value_{},
                                 name_{} {}

bool LeafEnumerate::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = offsetof(Microsoft_Cci_Pdb::LeafEnumerate, value);
  if (!stream->ReadBytes(to_read, &body_))
    return false;
  if (!ReadNumericConstant(stream, &value_))
    return false;
  if (!ReadWideString(stream, &name_))
    return false;

  return true;
}

LeafFriendCls::LeafFriendCls() : body_{} {}

bool LeafFriendCls::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = sizeof(body_);
  if (!stream->ReadBytes(to_read, &body_))
    return false;

  return true;
}

LeafFriendFcn::LeafFriendFcn() : body_{},
                                 name_{} {}

bool LeafFriendFcn::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = offsetof(Microsoft_Cci_Pdb::LeafFriendFcn, name);
  if (!stream->ReadBytes(to_read, &body_))
    return false;
  if (!ReadWideString(stream, &name_))
    return false;

  return true;
}

LeafIndex::LeafIndex() : body_{} {}

bool LeafIndex::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = sizeof(body_);
  if (!stream->ReadBytes(to_read, &body_))
    return false;

  return true;
}

LeafMember::LeafMember() : body_{},
                           offset_{},
                           name_{} {}

bool LeafMember::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = offsetof(Microsoft_Cci_Pdb::LeafMember, offset);
  if (!stream->ReadBytes(to_read, &body_))
    return false;
  if (!ReadUnsignedNumeric(stream, &offset_))
    return false;
  if (!ReadWideString(stream, &name_))
    return false;

  return true;
}

LeafMethod::LeafMethod() : body_{},
                           name_{} {}

bool LeafMethod::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = offsetof(Microsoft_Cci_Pdb::LeafMethod, name);
  if (!stream->ReadBytes(to_read, &body_))
    return false;
  if (!ReadWideString(stream, &name_))
    return false;

  return true;
}

LeafMFunction::LeafMFunction() : body_{} {}

bool LeafMFunction::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = sizeof(body_);
  if (!stream->ReadBytes(to_read, &body_))
    return false;

  return true;
}

LeafModifier::LeafModifier() : body_{},
                               attr_{} {}

bool LeafModifier::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = offsetof(Microsoft_Cci_Pdb::LeafModifier, attr);
  if (!stream->ReadBytes(to_read, &body_))
    return false;
  if (!ReadBasicType(stream, &attr_))
    return false;

  return true;
}

LeafNestType::LeafNestType() : body_{},
                               name_{} {}

bool LeafNestType::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = offsetof(Microsoft_Cci_Pdb::LeafNestTypeEx, name);
  if (!stream->ReadBytes(to_read, &body_))
    return false;
  if (!ReadWideString(stream, &name_))
    return false;

  return true;
}

LeafOneMethod::LeafOneMethod() : body_{},
                                 vbaseoff_{},
                                 name_{} {}

bool LeafOneMethod::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = offsetof(Microsoft_Cci_Pdb::LeafOneMethod, vbaseoff);
  if (!stream->ReadBytes(to_read, &body_))
    return false;
  if ((attr().mprop == Microsoft_Cci_Pdb::CV_MTintro ||
       attr().mprop == Microsoft_Cci_Pdb::CV_MTpureintro) &&
      !ReadBasicType(stream, &vbaseoff_)) {
    return false;
  }
  if (!ReadWideString(stream, &name_))
    return false;

  return true;
}

LeafPointer::LeafPointer() : body_{},
                             attr_{},
                             containing_class_{},
                             pmtype_{} {}

bool LeafPointer::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = offsetof(Microsoft_Cci_Pdb::LeafPointer::LeafPointerBody, attr);
  if (!stream->ReadBytes(to_read, &body_))
    return false;
  if (!ReadBasicType(stream, &attr_))
    return false;
  if ((attr().ptrmode == Microsoft_Cci_Pdb::CV_PTR_MODE_PMEM ||
       attr().ptrmode == Microsoft_Cci_Pdb::CV_PTR_MODE_PMFUNC) &&
      !ReadBasicType(stream, &containing_class_)) {
    return false;
  }
  if ((attr().ptrmode == Microsoft_Cci_Pdb::CV_PTR_MODE_PMEM ||
       attr().ptrmode == Microsoft_Cci_Pdb::CV_PTR_MODE_PMFUNC) &&
      !ReadBasicType(stream, &pmtype_)) {
    return false;
  }

  return true;
}

LeafProcedure::LeafProcedure() : body_{} {}

bool LeafProcedure::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = sizeof(body_);
  if (!stream->ReadBytes(to_read, &body_))
    return false;

  return true;
}

LeafSTMember::LeafSTMember() : body_{},
                               name_{} {}

bool LeafSTMember::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = offsetof(Microsoft_Cci_Pdb::LeafSTMember, name);
  if (!stream->ReadBytes(to_read, &body_))
    return false;
  if (!ReadWideString(stream, &name_))
    return false;

  return true;
}

LeafUnion::LeafUnion() : body_{},
                         size_{},
                         name_{},
                         decorated_name_{} {}

bool LeafUnion::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = offsetof(Microsoft_Cci_Pdb::LeafUnion, data);
  if (!stream->ReadBytes(to_read, &body_))
    return false;
  if (!ReadUnsignedNumeric(stream, &size_))
    return false;
  if (!ReadWideString(stream, &name_))
    return false;
  if ((property().decorated_name_present != 0) &&
      !ReadWideString(stream, &decorated_name_)) {
    return false;
  }

  return true;
}

LeafVBClass::LeafVBClass() : body_{},
                             vbpoff_{},
                             vboff_{} {}

bool LeafVBClass::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = offsetof(Microsoft_Cci_Pdb::LeafVBClass, vbpoff);
  if (!stream->ReadBytes(to_read, &body_))
    return false;
  if (!ReadUnsignedNumeric(stream, &vbpoff_))
    return false;
  if (!ReadUnsignedNumeric(stream, &vboff_))
    return false;

  return true;
}

LeafVFuncOff::LeafVFuncOff() : body_{} {}

bool LeafVFuncOff::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = sizeof(body_);
  if (!stream->ReadBytes(to_read, &body_))
    return false;

  return true;
}

LeafVFuncTab::LeafVFuncTab() : body_{} {}

bool LeafVFuncTab::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = sizeof(body_);
  if (!stream->ReadBytes(to_read, &body_))
    return false;

  return true;
}

LeafVTShape::LeafVTShape() : body_{} {}

bool LeafVTShape::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = offsetof(Microsoft_Cci_Pdb::LeafVTShape, desc);
  if (!stream->ReadBytes(to_read, &body_))
    return false;

  return true;
}

MethodListRecord::MethodListRecord() : body_{},
                                       vbaseoff_{} {}

bool MethodListRecord::Initialize(common::BinaryStreamParser* stream) {
  size_t to_read = offsetof(Microsoft_Cci_Pdb::mlMethod, vbaseoff);
  if (!stream->ReadBytes(to_read, &body_))
    return false;
  if ((attr().mprop == Microsoft_Cci_Pdb::CV_MTintro ||
       attr().mprop == Microsoft_Cci_Pdb::CV_MTpureintro) &&
      !ReadBasicType(stream, &vbaseoff_)) {
    return false;
  }

  return true;
}

}  // namespace pdb
